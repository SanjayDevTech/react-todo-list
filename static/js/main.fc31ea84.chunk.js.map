{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["Button","styled","button","props","color","bg","App","useState","text","setText","count","setCount","id","title","todos","setTodos","className","placeholder","onChange","e","target","value","onClick","curText","trim","curTodos","push","map","todo","index","updateTodo","splice","deleteTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+YASA,IAAMA,E,MAASC,EAAOC,OAAV,KACD,SAAAC,GAAK,OAAIA,EAAMC,OAAS,WACb,SAAAD,GAAK,OAAIA,EAAME,IAAM,WA+D5BC,EA1DO,WAAO,IAAD,EACFC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,OAEAF,mBAAS,GAFT,mBAEnBG,EAFmB,KAEZC,EAFY,OAGAJ,mBAAS,CAAC,CAACK,GAAI,EAAGC,MAAO,YAHzB,mBAGnBC,EAHmB,KAGZC,EAHY,KAkC1B,OACE,sBAAKC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,sBACA,uBAAMA,UAAU,WAAhB,UACA,gCACA,uBAAOA,UAAU,YAAYC,YAAY,oBAAoBC,SAAU,SAACC,GAAD,OAAOV,EAAQU,EAAEC,OAAOC,QAAQA,MAAOb,IAC9G,eAACR,EAAD,CAAQK,GAAG,QAAQiB,QApCT,WACZ,IAAMC,EAAUf,EAChB,GAAuB,KAAnBe,EAAQC,OAAZ,CAIA,IAAMC,EAAQ,YAAOX,GAErBW,EAASC,KAAK,CAACd,GAAIF,EAAOG,MAAOU,IACjCR,EAASU,GACTd,EAASD,EAAM,GACfD,EAAQ,MAyBN,kBAA2CC,QAE3C,oBAAIM,UAAU,qBAAd,SACCF,EAAMa,KAAI,SAACC,EAAMC,GAAP,OACT,qBAAkBb,UAAU,WAA5B,UACA,sBAAKA,UAAU,mBAAf,cACEY,EAAKhB,GADP,IACYgB,EAAKf,SAEjB,eAACb,EAAD,CAAQK,GAAG,SAASiB,QAAS,kBAxBlB,SAACO,GAChB,KAAoB,KAAhBrB,EAAKgB,QAAiBK,EAAQ,GAAlC,CAGA,IAAMJ,EAAQ,YAAOX,GACrBW,EAASI,GAAOhB,MAAQL,EACxBO,EAASU,GACThB,EAAQ,KAiB+BqB,CAAWD,IAA9C,qBAA+DD,EAAKhB,MACpE,eAACZ,EAAD,CAAQK,GAAG,MAAMiB,QAAS,kBA/Bf,SAACO,GAChB,IAAMJ,EAAQ,YAAOX,GACrBW,EAASM,OAAOF,EAAO,GACvBd,EAASU,GA4B2BO,CAAWH,IAA3C,qBAA4DD,EAAKhB,QALxDgB,EAAKhB,gBChDPqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fc31ea84.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport styled from \"styled-components\";\n\ninterface Props {\n  color?: string;\n  bg?: string;\n}\n\nconst Button = styled.button<Props>`\n  color: ${props => props.color || \"white\"};\n  background-color: ${props => props.bg || \"green\"};\n  border: none;\n  font-size: 20px;\n`;\n\nconst App: React.FC = () => {\n  const [text, setText] = useState(\"\");\n  const [count, setCount] = useState(1);\n  const [todos, setTodos] = useState([{id: 0, title: \"Sanjay\"}]);\n  let addTodo = () => {\n    const curText = text;\n    if (curText.trim() === \"\") {\n      // console.log(\"Empty field\");\n      return;\n    }\n    const curTodos = [...todos];\n    // console.log(curTodos);\n    curTodos.push({id: count, title: curText});\n    setTodos(curTodos);\n    setCount(count+1);\n    setText(\"\");\n  }\n\n  let deleteTodo = (index: number) => {\n    const curTodos = [...todos];\n    curTodos.splice(index, 1);\n    setTodos(curTodos);\n  }\n\n  let updateTodo = (index: number) => {\n    if (text.trim() === \"\" || index < 0) {\n      return;\n    }\n    const curTodos = [...todos];\n    curTodos[index].title = text;\n    setTodos(curTodos);\n    setText(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Todolist</header>\n      <main className=\"App-body\">\n      <div>\n      <input className=\"App-input\" placeholder=\"Type something...\" onChange={(e) => setText(e.target.value)} value={text}/>\n      <Button bg=\"green\" onClick={addTodo}>Add #{count}</Button>\n      </div>\n      <ul className=\"App-list-container\">\n      {todos.map((todo, index) => (\n        <li key={todo.id} className=\"App-item\">\n        <div className=\"App-item-content\">\n        #{todo.id} {todo.title}\n        </div>\n        <Button bg=\"orange\" onClick={() => updateTodo(index)}>Update #{todo.id}</Button>\n        <Button bg=\"red\" onClick={() => deleteTodo(index)}>Delete #{todo.id}</Button>\n        </li>\n      ))}\n      </ul>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}